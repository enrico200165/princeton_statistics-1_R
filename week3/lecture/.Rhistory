q()
install.packages("swirl")
8 != 8.0
mad_libs <- function(...){
# Do your argument unpacking here!
args <- list(...)
place <- args[["place"]]
adjective <- args[["adjective"]]
noun <- args[["noun"]]
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
mad_libs("sulmona","bello","enrico")
mad_libs(place = "sulmona","bello","enrico")
mad_libs(place = "sulmona",adjetive = "bello","enrico")
mad_libs(place = "sulmona",adjetive = "bello",noun = "enrico")
q()
?invisible
swirl()
library(swirl)
swirl()
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
cls_list <- sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flag$orange)
sum(flags$orange)
flags_colors <- flags[,11:17]
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors[c(11:17)], sum)
lapply(flag_colors[, c(11:17)], sum)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, avg)
sapply(flag_colors, mean)
flag_shapes <- flags[ , c(19:23)]
flag_shapes <- flags[ , 19:23]
sapply(flag_shapes, range)
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
swirl()
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
laply(unique_vals, length)
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:10, 20, replace = FALSE)
sample(1:20, 10, replace = FALSE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0:1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
glips
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flps2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,100,25)
?rpois
skip()
replicate(100, rpois(5, 10))
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
cm
hist(cm)
data(Cars)
data(cars)
?cars
head(Cars)
head(cars)
plot(cars)
?plot
| cars$speed, y = cars$dist)
ok()
plot(x = cars$speed, y = cars$dist)
plot(y = cars$speed, x = cars$dist)
plot(y = cars$speed, x = cars$dist,xlab = "Speed")
plot(x = cars$speed, y = cars$dist,xlab = "Speed")
plot(x = cars$speed, y = cars$dist,ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist,xlab = "Speed",ylab = "Stopping Distance")
plot(cars, main="My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
plot(cars, pch=2
)
data("mtcars")
data(mtcars)
str(mtcars)
names(mtcars)
class(mtcars)
class(mtcars)
?boxplot
boxplot(data = mtcars,formula = mpg ~ cyl)
boxplot(mtcars,formula = data = mtcars$mpg ~ data = mtcars$cyl)
boxplot(data = mtcars,formula = mtcars$mpg ~ data = mtcars$cyl)
boxplot(data = mtcars,formula = mtcars$mpg ~ mtcars$cyl)
boxplot(mtcars,formula = mtcars$mpg ~ mtcars$cyl)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
str(c(1,2,3))
str(c(1:3))
str(1:3)
mapply(function(uno,due) { paste(uno,due)}), 0:9,LETTERS[1:10])
mapply(function(uno,due) { paste(uno,due)}, 0:9,LETTERS[1:10])
mapply(function(uno,due) { paste(uno,due,sep="")}, 0:9,LETTERS[1:10])
summary(plants)
data(plants)
summary(PlantGrowth)
install.packages(c("jpeg","jsonlite","data.table","httr"))
install.packages("xslx")
install.packages("xlsx")
library(xlsx)
prova <- read.xlsx(V:\\data\\learn\\02_JHU_DSci\\00_git-hub_repos\\courses-master\\03_GettingData\\01_05_readingLocalFiles", sheetIndex = 1, colIndex = c(1:10), rowIndex = c(1:10))
prova <- read.xlsx("V:\\data\\learn\\02_JHU_DSci\\00_git-hub_repos\\courses-master\\03_GettingData\\01_05_readingLocalFiles", sheetIndex = 1, colIndex = c(1:10), rowIndex = c(1:10))
prova <- read.xlsx("V:\\data\\learn\\02_JHU_DSci\\00_git-hub_repos\\courses-master\\03_GettingData\\01_06_readingExcelFiles\data\cameras.xlsx", sheetIndex = 1, colIndex = c(1:10), rowIndex = c(1:10))
prova <- read.xlsx("V:\\data\\learn\\02_JHU_DSci\\00_git-hub_repos\\courses-master\\03_GettingData\\01_06_readingExcelFiles\\data\\cameras.xlsx", sheetIndex = 1, colIndex = c(1:10), rowIndex = c(1:10))
prova
prova <- read.xlsx("V:\\data\\learn\\02_JHU_DSci\\00_git-hub_repos\\courses-master\\03_GettingData\\01_06_readingExcelFiles\\data\\cameras.xlsx", sheetIndex = 1, colIndex = c(1:10), rowIndex = c(1:10))
install_from_swirl("Getting and Cleaning Data")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
> a <- rep(c(1,2),5)
a <- rep(c(1,2),5)
a
b <- c(101:110)
table(a,b)
dummyDF <- data.frame(righe=c(1,2),colonne=c("a","b"))
dummyDF
table(dummyDF)
dummyDF <- data.frame(righe=c("r1","r2"),colonne=c("c1","c2"))
table(dummyDF)
dummyDF
x <- c(1 ,1 ,2 ,2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5)
cut(x, breaks = c(0,2,4,6))
x <- repl(c(1,5),5)
x <- rep(c(1,5),5)
x
x <- gl(c(1,5),5)
x <- c(rep(1,5),rep(5,5))
x
x <- rep(1,10)
x
idx <- rep(c("idx1","idx2"),5)
idx
tapply(x,idx,sum)
idx <- c(rep("idx1",9),"idx2")
idx
tapply(x,idx,sum)
x <- c(rep(1,9), 0.123)
idx <- c(rep("idx1",9),"idx2")
tapply(x,idx,sum)
head(InsectSprays)
?ave
setwd("V:/data/pers_dev/sources/R/princeton-stat-1/week3/lecture")
